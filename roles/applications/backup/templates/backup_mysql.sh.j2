#!/bin/sh

#
# (C)2014 Brice Burgess @ iceburg.net, (c) 2010 Owen Carter @ Mirabeau BV
# This script is provided as-is; no liability can be accepted for use.
# You are free to modify and reproduce so long as this attribution is preserved.
#

BACKUPBIN="`which innobackupex`"

TMPFILE="/tmp/mysql_backup.$$.tmp"
USEROPTIONS="--user=root --password={{ mysql_root_password }}"
BACKDIR="{{ backup_mysql_target  }}"
BASEBACKDIR=$BACKDIR/base
INCRBACKDIR=$BACKDIR/incr
FULLBACKUPLIFE=86400 # How long to keep incrementing a backup for
KEEP=6 # Number of full backups (and its incrementals) to keep
START=`date +%s`


#############################################################################
# Bootstrap Functions
#############################################################################
error()
{
echo "$1" 1>&2
rm -f $TMPFILE
exit 1
}

echo "---------------------------------------------------"
echo "mysql_backup.sh beginning: `date`"
echo 


#############################################################################
# Sanity Checks
#############################################################################


if [ ! -d $BASEBACKDIR ]; then
	mkdir -p "$BASEBACKDIR"
fi

if [ ! -d $INCRBACKDIR ]; then
	mkdir -p "$INCRBACKDIR"
fi

if [ ! -x $BACKUPBIN ]; then
	error "Backup binary not found"
fi

if [ -z "`mysqladmin $USEROPTIONS status | grep 'Uptime'`" ] ; then
error "HALTED: MySQL does not appear to be running."
fi
 
if ! `echo 'exit' | mysql -s $USEROPTIONS` ; then
error "HALTED: Supplied mysql username or password appears to be incorrect (not copied here for security, see script)."
fi
 
echo "Sanity checks passed."
echo


#############################################################################
# Perform Backup
#############################################################################
 
LATEST=`find $BASEBACKDIR -mindepth 1 -maxdepth 1 -type d -printf "%P\n" | sort -nr | head -1`
AGE=`stat -c %Y $BASEBACKDIR/$LATEST`
 
if [ "$LATEST" -a `expr $AGE + $FULLBACKUPLIFE + 5` -ge $START ]; then
	echo "Performing an incremental backup to $INCRBACKDIR/$LATEST"
	echo
	
	mkdir -p $INCRBACKDIR/$LATEST
	
	### PERFORM INREMENTAL BACKUP
	LATESTINCR=`find $INCRBACKDIR/$LATEST -mindepth 1 -maxdepth 1 -type d | sort -nr | head -1`
	if [ ! $LATESTINCR ]; then 
		INCRBASEDIR=$BASEBACKDIR/$LATEST
	else 
		INCRBASEDIR=$LATESTINCR;
	fi

	$BACKUPBIN $USEROPTIONS --incremental $INCRBACKDIR/$LATEST --incremental-basedir=$INCRBASEDIR > $TMPFILE 2>&1
else
	echo "Performing a full base backup to $BASEBACKDIR"
	echo
	
	### PERFORM BASE BACKUP
	$BACKUPBIN $USEROPTIONS $FILTERTABLES $BASEBACKDIR > $TMPFILE 2>&1
fi


#############################################################################
# Post Backup Tasks
#############################################################################
	
	
if [ -z "`tail -1 $TMPFILE | grep 'completed OK!'`" ]; then
	echo "---------- ERROR OUTPUT  ----------"
	cat $TMPFILE
	error "Backup Failed!"
fi

THISBACKUP=`awk -- "/Backup created in directory/ { split( \\\$0, p, \"'\" ) ; print p[2] }" $TMPFILE`

# Remove Temporray File 
rm -f $TMPFILE

echo "Databases backed up successfully to: $THISBACKUP"
echo
 
MINS=$(($FULLBACKUPLIFE * ($KEEP + 1 ) / 60))
echo "Cleaning up backups older than $(( $MINS / 60 / 24 )) days"
 

# Delete old bakcups
for DEL in `find $BASEBACKDIR -mindepth 1 -maxdepth 1 -type d -mmin +$MINS -printf "%P\n"`
do
echo "deleting $DEL"
rm -rf $BASEBACKDIR/$DEL
rm -rf $INCRBACKDIR/$DEL
done
 
 
SPENT=$(((`date +%s` - $START) / 60))
echo
echo "took $SPENT minutes"
echo "completed: `date`"

exit 0